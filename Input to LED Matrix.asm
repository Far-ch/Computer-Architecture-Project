
; Program Start Address
.dorg 0x8000


; Hardware Constants
.const r_data    0x0a    ; Display pixel data port
.const c_addr    0x0b    ; Display column address port
.const KBD_AVAIL 0x0d    ; Keyboard availability flag
.const KBD_DATA  0x0c    ; Keyboard data port
.const KBD_En    0x0e    ; Keyboard enable
.const DIS_COL    64      ; Maximum display columns

; Registers
.reg keyStatus   R0      ; Holds status of keyboard availability
.reg pixelValue  R1      ; Holds current pixel row value for drawing
.reg keyControl  R2      ; Keyboard control value
.reg columnIndex R3      ; Column being drawn to
.reg countLoop   R4      ; Loop counter for drawing character rows
.reg charCurrent R5      ; Currently displayed character
.reg fontAddress R6      ; Address of current font character in font table
.reg tempVal     R7      ; Temporary register for calculations

; Initialization

LDI charCurrent, ' '     ; Start with space character

; Main Loop - Check keyboard and draw character

start_check:
    IN  keyStatus, KBD_AVAIL  ; Read keyboard availability
    CPI keyStatus, 0          ; Is no key pressed?
    BREQ redraw_char          ; If none, redraw the current character

    ; Enable keyboard reading
    LDI keyControl, 1
    OUT KBD_En, keyControl

    ; Read key from keyboard
    IN  tempVal, KBD_DATA

    ; Convert lowercase to uppercase
    CPI tempVal, 'a'          ; If below 'a'
    BRMI to_uppercase         ; skip conversion
    CPI tempVal, 'z'+1        ; If above 'z'
    BRCC to_uppercase         ; skip conversion
    SUBI tempVal, 32          ; Make uppercase
    JMP done_case

; Convert uppercase to lowercase
to_uppercase:
    CPI tempVal, 'A'          ; If below 'A'
    BRMI done_case
    CPI tempVal, 'Z'+1        ; If above 'Z'
    BRCC done_case
    ADDI tempVal, 32          ; Make lowercase

; Store the processed character
done_case:
    MOV charCurrent, tempVal

    ; Reset keyboard status
    LDI keyControl, 3
    OUT KBD_En, keyControl
    LDI keyControl, 1
    OUT KBD_En, keyControl

; Redraw current character

redraw_char:
    MOV tempVal, charCurrent  ; Get ASCII code
    SUBI tempVal, ' '         ; Adjust for font table index
    MULI tempVal, 8           ; Each character = 8 rows in font
    ADDI tempVal, font        ; Point to font start
    MOV fontAddress, tempVal

    LDI columnIndex, 28       ; Starting column for drawing
    LDI countLoop, 8          ; Draw 8 rows
    LDI keyControl, 28        ; Reference column for shifting


; Drawing Loop

draw_loop:
    CPI columnIndex, 0
    BRMI skip_draw            ; Skip if column < 0
    CPI columnIndex, DIS_COL
    BREQ skip_draw            ; Skip if column >= max columns

    LD  pixelValue, [fontAddress]  ; Load pixel pattern for row

    ; Shift pixel pattern for correct alignment
    MOV tempVal, columnIndex
    SUB tempVal, keyControl
    LSR tempVal
shift_loop:
    CPI tempVal, 0
    BREQ shifted
    LSR pixelValue
    DEC tempVal
    BRNE shift_loop

shifted:
    OUT r_data, pixelValue    ; Send pixel row to display
    OUT c_addr, columnIndex   ; Set display column address

; Move to next row
skip_draw:
    INC fontAddress
    INC columnIndex
    DEC countLoop
    BRNE draw_loop

    ; Loop back to check keyboard again
    JMP start_check

; Data Section

.data text "",0              ; Placeholder for string storage

; Font data - each character is 8 words (pixel rows)
.data font 
 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x38,0xdfc,0xdfc,0x38,0x0,0x0,0x0,0xe,0x1e,0x0,0x0,0x1e,0xe,0x0,0x220,0xff8,0xff8,0x220,0xff8,0xff8,0x220,0x0,0x638,0xc7c,0x844,0x3847,0x3847,0xfcc,0x798,0x0,0xc30,0x630,0x300,0x180,0xc0,0xc60,0xc30,0x0,0x780,0xfd8,0x87c,0x8e4,0x7bc,0xfd8,0x840,0x0,0x0,0x10,0x1e,0xe,0x0,0x0,0x0,0x0,0x0,0x0,0x3f0,0x7f8,0xc0c,0x804,0x0,0x0,0x0,0x0,0x804,0xc0c,0x7f8,0x3f0,0x0,0x0,0x80,0x2a0,0x3e0,0x1c0,0x1c0,0x3e0,0x2a0,0x80,0x0,0x80,0x80,0x3e0,0x3e0,0x80,0x80,0x0,0x0,0x0,0x1000,0x1e00,0xe00,0x0,0x0,0x0,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x0,0x0,0x0,0x0,0xc00,0xc00,0x0,0x0,0x0,0xc00,0x600,0x300,0x180,0xc0,0x60,0x30,0x0,0x3f0,0x7f8,0xc0c,0x8c4,0x8c4,0xc0c,0x7f8,0x3f0,0x0,0x810,0x818,0xffc,0xffc,0x800,0x800,0x0,0xe08,0xf0c,0x984,0x8c4,0x864,0xc3c,0xc18,0x0,0x408,0xc0c,0x844,0x844,0x844,0xffc,0x7b8,0x0,0xc0,0xe0,0xb0,0x898,0xffc,0xffc,0x880,0x0,0x47c,0xc7c,0x844,0x844,0x844,0xfc4,0x784,0x0,0x7f0,0xff8,0x84c,0x844,0x844,0xfc0,0x780,0x0,0xc,0xc,0xf04,0xf84,0xc4,0x7c,0x3c,0x0,0x7b8,0xffc,0x844,0x844,0x844,0xffc,0x7b8,0x0,0x38,0x87c,0x844,0x844,0xc44,0x7fc,0x3f8,0x0,0x0,0x0,0x0,0x630,0x630,0x0,0x0,0x0,0x0,0x0,0x800,0xe30,0x630,0x0,0x0,0x0,0x0,0x80,0x1c0,0x360,0x630,0xc18,0x808,0x0,0x0,0x120,0x120,0x120,0x120,0x120,0x120,0x0,0x0,0x808,0xc18,0x630,0x360,0x1c0,0x80,0x0,0x18,0x1c,0x4,0xdc4,0xde4,0x3c,0x18,0x0,0x7f0,0xff8,0x808,0xbc8,0xbc8,0xbf8,0x1f0,0x0,0xfe0,0xff0,0x98,0x8c,0x98,0xff0,0xfe0,0x0,0x804,0xffc,0xffc,0x844,0x844,0xffc,0x7b8,0x0,0x3f0,0x7f8,0xc0c,0x804,0x804,0xc0c,0x618,0x0,0x804,0xffc,0xffc,0x804,0xc0c,0x7f8,0x3f0,0x0,0x804,0xffc,0xffc,0x844,0x8e4,0xc0c,0xe1c,0x0,0x804,0xffc,0xffc,0x844,0xe4,0xc,0x1c,0x0,0x3f0,0x7f8,0xc0c,0x884,0x884,0x78c,0xf98,0x0,0xffc,0xffc,0x40,0x40,0x40,0xffc,0xffc,0x0,0x0,0x0,0x804,0xffc,0xffc,0x804,0x0,0x0,0x700,0xf00,0x800,0x804,0xffc,0x7fc,0x4,0x0,0x804,0xffc,0xffc,0xc0,0x1e0,0xf3c,0xe1c,0x0,0x804,0xffc,0xffc,0x804,0x800,0xc00,0xe00,0x0,0xffc,0xffc,0x38,0x70,0x70,0x38,0xffc,0xffc,0xffc,0xffc,0x38,0x70,0xe0,0xffc,0xffc,0x0,0x7f8,0xffc,0x804,0x804,0x804,0xffc,0x7f8,0x0,0x804,0xffc,0xffc,0x844,0x44,0x7c,0x38,0x0,0x7f8,0xffc,0x804,0xe04,0x3c04,0x3ffc,0x27f8,0x0,0x804,0xffc,0xffc,0x44,0xc4,0xffc,0xf38,0x0,0x618,0xe3c,0x864,0x844,0x8c4,0xf9c,0x718,0x0,0x1c,0xc,0x804,0xffc,0xffc,0x804,0xc,0x1c,0x7fc,0xffc,0x800,0x800,0x800,0xffc,0x7fc,0x0,0x1fc,0x3fc,0x600,0xc00,0xc00,0x600,0x3fc,0x1fc,0x3fc,0xffc,0xe00,0x380,0x380,0xe00,0xffc,0x3fc,0xc0c,0xe1c,0x330,0x1e0,0x1e0,0x330,0xe1c,0xc0c,0x1c,0x3c,0x860,0xfc0,0xfc0,0x860,0x3c,0x1c,0xe1c,0xf0c,0x984,0x8c4,0x864,0x834,0xc1c,0xe0c,0x0,0x0,0xffc,0xffc,0x804,0x804,0x0,0x0,0x38,0x70,0xe0,0x1c0,0x380,0x700,0xe00,0x0,0x0,0x0,0x804,0x804,0xffc,0xffc,0x0,0x0,0x8,0xc,0x6,0x3,0x6,0xc,0x8,0x0,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x0,0x0,0x3,0x7,0x4,0x0,0x0,0x0,0x700,0xfa0,0x8a0,0x8a0,0x7e0,0xfc0,0x800,0x0,0x4,0xffc,0xffc,0x820,0x860,0xfc0,0x780,0x0,0x7c0,0xfe0,0x820,0x820,0x820,0xc60,0x440,0x0,0x780,0xfc0,0x860,0x824,0x7fc,0xffc,0x800,0x0,0x7c0,0xfe0,0x8a0,0x8a0,0x8a0,0xce0,0x4c0,0x0,0x840,0xff8,0xffc,0x844,0xc,0x18,0x0,0x0,0x27c0,0x6fe0,0x4820,0x4820,0x7fc0,0x3fe0,0x20,0x0,0x804,0xffc,0xffc,0x40,0x20,0xfe0,0xfc0,0x0,0x0,0x0,0x820,0xfec,0xfec,0x800,0x0,0x0,0x0,0x3000,0x7000,0x4000,0x4020,0x7fec,0x3fec,0x0,0x804,0xffc,0xffc,0x180,0x3c0,0xe60,0xc20,0x0,0x0,0x0,0x804,0xffc,0xffc,0x800,0x0,0x0,0xfe0,0xfe0,0x60,0xfc0,0xfc0,0x60,0xfe0,0xfc0,0x20,0xfe0,0xfc0,0x20,0x20,0xfe0,0xfc0,0x0,0x7c0,0xfe0,0x820,0x820,0x820,0xfe0,0x7c0,0x0,0x4020,0x7fe0,0x7fc0,0x4820,0x820,0xfe0,0x7c0,0x0,0x7c0,0xfe0,0x820,0x4820,0x7fc0,0x7fe0,0x4020,0x0,0x820,0xfe0,0xfc0,0x860,0x20,0xe0,0xc0,0x0,0x440,0xce0,0x9a0,0x920,0xb20,0xe60,0x440,0x0,0x20,0x20,0x7f8,0xffc,0x820,0xc20,0x400,0x0,0x7e0,0xfe0,0x800,0x800,0x7e0,0xfe0,0x800,0x0,0x1e0,0x3e0,0x600,0xc00,0xc00,0x600,0x3e0,0x1e0,0x7e0,0xfe0,0xc00,0x700,0x700,0xc00,0xfe0,0x7e0,0x820,0xc60,0x6c0,0x380,0x380,0x6c0,0xc60,0x820,0x47e0,0x4fe0,0x4800,0x4800,0x6800,0x3fe0,0x1fe0,0x0,0xc60,0xe60,0xb20,0x9a0,0x8e0,0xc60,0xc20,0x0,0x0,0x40,0x40,0x7f8,0xfbc,0x804,0x804,0x0,0x0,0x0,0x0,0xfbc,0xfbc,0x0,0x0,0x0,0x0,0x804,0x804,0xfbc,0x7f8,0x40,0x40,0x0,0x8,0xc,0x4,0xc,0x8,0xc,0x4,0x0

